// initialise
// --------------------------------

$col-width: (100% / $columns);

[data-container]::after,
[data-row]::after {
  display: table;
  content: "";
  clear: both;
}

[data-container] {
  margin: 0 auto;
}

[data-col] {
  position: relative;
  min-height: 1px;
  box-sizing: border-box;
}


// grid
// --------------------------------

@each $breakpoint-key, $breakpoint-value in $breakpoints {  
  @media only screen and (min-width: $breakpoint-value) {
    [data-container] {
      max-width: $breakpoint-value;
      padding: 0 map-get($column-spacing, $breakpoint-key);
      
      @if ($breakpoint-key == xs) or ($breakpoint-key == sm) {
        max-width: 100%;
      }
    }
    
    [data-row] {
      margin: 0 (-#{map-get($column-spacing, $breakpoint-key)});
    }
    
    [data-col] {
      padding: 0 map-get($column-spacing, $breakpoint-key);
    }
    
    [data-col*="#{$breakpoint-key}-"] {
      float: left;
    }
    
    @for $i from 0 through $columns {
      [data-col~="#{$breakpoint-key}-#{$i}"] {
        width: ($col-width * $i);
      }
    
      [data-push~="#{$breakpoint-key}-#{$i}"] {
        left: ($col-width * $i);
      }
    
      [data-pull~="#{$breakpoint-key}-#{$i}"] {
        right: ($col-width * $i);
      }
    
      [data-offset~="#{$breakpoint-key}-#{$i}"] {
        margin-left: ($col-width * $i);
      }
    }
  }
  
  @media #{map-get($only, $breakpoint-key)} {
    [data-hidden~="#{$breakpoint-key}"],
    [data-visible]:not([data-visible~="#{$breakpoint-key}"]) {
      display: none !important;
    }
  }  
}